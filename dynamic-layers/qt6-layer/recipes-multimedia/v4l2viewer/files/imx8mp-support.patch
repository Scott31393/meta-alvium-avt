diff --git a/Source/Headers/SelectSubDeviceDialog.h b/Source/Headers/SelectSubDeviceDialog.h
old mode 100755
new mode 100644
diff --git a/Source/Headers/V4L2EventHandler.h b/Source/Headers/V4L2EventHandler.h
index 67b5346..78a7a6d 100644
--- a/Source/Headers/V4L2EventHandler.h
+++ b/Source/Headers/V4L2EventHandler.h
@@ -20,11 +20,13 @@
 #define V4L2EVENTREADER_H
 
 #include <QThread>
+#include <QVector>
+#include <linux/videodev2.h>
 
 class V4L2EventHandler : public QThread {
     Q_OBJECT
 public:
-    explicit V4L2EventHandler(int fd);
+    explicit V4L2EventHandler(const std::vector<int>  & fds);
     virtual ~V4L2EventHandler();
 
     // This function enables the reception of changes for the control id
@@ -43,7 +45,7 @@ protected:
     void run() override;
 private:
     // File descriptor of the camera
-    int m_Fd;
+    std::vector<int> m_Fds;
     int m_eventFd;
 };
 
diff --git a/Source/Headers/V4L2Viewer.h b/Source/Headers/V4L2Viewer.h
index aebbf23..bfd8035 100644
--- a/Source/Headers/V4L2Viewer.h
+++ b/Source/Headers/V4L2Viewer.h
@@ -42,7 +42,7 @@ class V4L2Viewer : public QMainWindow
     Q_OBJECT
 
 public:
-    V4L2Viewer( QWidget *parent = 0, Qt::WindowFlags flags = 0 );
+    V4L2Viewer( QWidget *parent = 0, Qt::WindowFlags flags = Qt::WindowFlags() );
     ~V4L2Viewer();
 
 private:
diff --git a/Source/Resources/Forms/V4L2Viewer.ui b/Source/Resources/Forms/V4L2Viewer.ui
index 6c640e3..5f362fb 100644
--- a/Source/Resources/Forms/V4L2Viewer.ui
+++ b/Source/Resources/Forms/V4L2Viewer.ui
@@ -2309,7 +2309,7 @@ titlebar-normal-icon: url(:/V4L2Viewer/resize4.png);
     <bool>false</bool>
    </property>
    <property name="features">
-    <set>QDockWidget::AllDockWidgetFeatures</set>
+    <set>QDockWidget::DockWidgetClosable | QDockWidget::DockWidgetMovable | QDockWidget::DockWidgetFloatable | QDockWidget::DockWidgetVerticalTitleBar</set>
    </property>
    <property name="allowedAreas">
     <set>Qt::RightDockWidgetArea</set>
diff --git a/Source/Source/Camera.cpp b/Source/Source/Camera.cpp
index b03bac4..5da4e66 100644
--- a/Source/Source/Camera.cpp
+++ b/Source/Source/Camera.cpp
@@ -272,18 +272,31 @@ int Camera::OpenDevice(std::string &deviceName, QVector<QString>& subDevices, bo
     m_BlockingMode = blockingMode;
     m_UseV4L2TryFmt = v4l2TryFmt;
 
-    switch (ioMethodType)
-    {
-    case IO_METHOD_MMAP:
-         m_pFrameObserver = QSharedPointer<FrameObserverMMAP>(new FrameObserverMMAP(m_ShowFrames));
-         break;
-    case IO_METHOD_USERPTR:
-         m_pFrameObserver = QSharedPointer<FrameObserverUSER>(new FrameObserverUSER(m_ShowFrames));
-         break;
-    }
-    connect(m_pFrameObserver.data(), SIGNAL(OnFrameReady_Signal(const QImage &, const unsigned long long &)), this, SLOT(OnFrameReady(const QImage &, const unsigned long long &)));
-    connect(m_pFrameObserver.data(), SIGNAL(OnFrameID_Signal(const unsigned long long &)), this, SLOT(OnFrameID(const unsigned long long &)));
-    connect(m_pFrameObserver.data(), SIGNAL(OnDisplayFrame_Signal(const unsigned long long &)), this, SLOT(OnDisplayFrame(const unsigned long long &)));
+    std::vector<IO_METHOD_TYPE> ioMethodList = {IO_METHOD_USERPTR, IO_METHOD_MMAP};
+
+    auto ioMethodToMemory = [](IO_METHOD_TYPE method) -> int {
+        switch (method)
+        {
+            case IO_METHOD_USERPTR:
+                return V4L2_MEMORY_USERPTR;
+            case IO_METHOD_MMAP:
+                return V4L2_MEMORY_MMAP;
+        }
+
+        return 0;
+    };
+
+    auto testIoMethod = [&](IO_METHOD_TYPE method) {
+        v4l2_create_buffers createBuffers = {0};
+        createBuffers.count = 0;
+        createBuffers.memory = ioMethodToMemory(method);
+        createBuffers.format.type = m_DeviceBufferType;
+
+        if (iohelper::xioctl(m_DeviceFileDescriptor,VIDIOC_CREATE_BUFS,&createBuffers) == 0)
+            return true;
+
+        return false;
+    };
 
     if (-1 == m_DeviceFileDescriptor)
     {
@@ -337,13 +350,6 @@ int Camera::OpenDevice(std::string &deviceName, QVector<QString>& subDevices, bo
 
             result = 0;
 
-            m_pEventHandler = new V4L2EventHandler(m_DeviceFileDescriptor);
-
-			qRegisterMetaType<v4l2_event_ctrl>();
-
-            connect(m_pEventHandler,SIGNAL(ControlChanged(int,v4l2_event_ctrl)),this,SLOT(OnCtrlUpdate(int, v4l2_event_ctrl)));
-
-			m_pEventHandler->start();
         }
 
         for (auto const subDevice : subDevices)
@@ -391,6 +397,46 @@ int Camera::OpenDevice(std::string &deviceName, QVector<QString>& subDevices, bo
         LOG_EX("Camera::OpenDevice open %s failed because %s is already open", deviceName.c_str(), m_DeviceName.c_str());
     }
 
+    for (auto method : ioMethodList)
+    {
+        if (testIoMethod(method))
+        {
+            ioMethodType = method;
+            LOG_EX("Camera::OpenDevice test memory type %d successful",ioMethodToMemory(method));
+            break;
+        }
+        else
+        {
+            LOG_EX("Camera::OpenDevice test memory type %d failed",ioMethodToMemory(method));
+        }
+    }
+
+    switch (ioMethodType)
+    {
+        case IO_METHOD_MMAP:
+            m_pFrameObserver = QSharedPointer<FrameObserverMMAP>(new FrameObserverMMAP(m_ShowFrames));
+            break;
+        case IO_METHOD_USERPTR:
+            m_pFrameObserver = QSharedPointer<FrameObserverUSER>(new FrameObserverUSER(m_ShowFrames));
+            break;
+    }
+    connect(m_pFrameObserver.data(), SIGNAL(OnFrameReady_Signal(const QImage &, const unsigned long long &)), this, SLOT(OnFrameReady(const QImage &, const unsigned long long &)));
+    connect(m_pFrameObserver.data(), SIGNAL(OnFrameID_Signal(const unsigned long long &)), this, SLOT(OnFrameID(const unsigned long long &)));
+    connect(m_pFrameObserver.data(), SIGNAL(OnDisplayFrame_Signal(const unsigned long long &)), this, SLOT(OnDisplayFrame(const unsigned long long &)));
+
+    auto fileDescriptors = m_SubDeviceFileDescriptors;
+    fileDescriptors.push_back(m_DeviceFileDescriptor);
+
+
+    m_pEventHandler = new V4L2EventHandler(fileDescriptors);
+
+    qRegisterMetaType<v4l2_event_ctrl>();
+
+    connect(m_pEventHandler,SIGNAL(ControlChanged(int,v4l2_event_ctrl)),this,SLOT(OnCtrlUpdate(int, v4l2_event_ctrl)));
+
+    m_pEventHandler->start();
+
+
     return result;
 }
 
@@ -519,7 +565,7 @@ int Camera::DeviceDiscoveryStart()
 
     do
     {
-        deviceName.sprintf("/dev/video%d", deviceCount);
+        deviceName = QString("/dev/video%1").arg(deviceCount);
 
         if ((fileDiscriptor = open(deviceName.toStdString().c_str(), O_RDWR)) == -1)
         {
@@ -590,7 +636,7 @@ int Camera::SubDeviceDiscoveryStart()
 
     do
     {
-        subDeviceName.sprintf("/dev/v4l-subdev%d", subDeviceCount);
+        subDeviceName = QString("/dev/v4l-subdev%1").arg(subDeviceCount);
 
         if ((fileDiscriptor = open(subDeviceName.toStdString().c_str(), O_RDWR)) == -1)
         {
@@ -808,6 +854,7 @@ int Camera::SetFrameSize(uint32_t width, uint32_t height)
         m_pPixFormat->SetHeight(fmt, height);
         m_pPixFormat->SetField(fmt, V4L2_FIELD_ANY);
         m_pPixFormat->SetBytesPerLine(fmt, 0);
+        m_pPixFormat->SetSizeImage(fmt, 0);
 
         if (m_UseV4L2TryFmt)
         {
@@ -858,6 +905,7 @@ int Camera::SetWidth(uint32_t width)
         m_pPixFormat->SetWidth(fmt, width);
         m_pPixFormat->SetField(fmt, V4L2_FIELD_ANY);
         m_pPixFormat->SetBytesPerLine(fmt, 0);
+        m_pPixFormat->SetSizeImage(fmt, 0);
 
         if (m_UseV4L2TryFmt)
         {
@@ -939,6 +987,7 @@ int Camera::SetHeight(uint32_t height)
         m_pPixFormat->SetHeight(fmt, height);
         m_pPixFormat->SetField(fmt, V4L2_FIELD_ANY);
         m_pPixFormat->SetBytesPerLine(fmt, 0);
+        m_pPixFormat->SetSizeImage(fmt, 0);
 
         if (m_UseV4L2TryFmt)
         {
@@ -1091,6 +1140,7 @@ int Camera::SetPixelFormat(uint32_t pixelFormat, QString pfText)
         m_pPixFormat->SetPixelFormat(fmt, pixelFormat);
         m_pPixFormat->SetField(fmt, V4L2_FIELD_ANY);
         m_pPixFormat->SetBytesPerLine(fmt, 0);
+        m_pPixFormat->SetSizeImage(fmt, 0);
 
         if (m_UseV4L2TryFmt)
         {
@@ -1200,8 +1250,10 @@ void Camera::SetFrameSizeByIndex(int index)
 		frmsizeenum.index = index;
 
 		if (!iohelper::xioctl(m_DeviceFileDescriptor,VIDIOC_ENUM_FRAMESIZES,&frmsizeenum)) {
-			fmt.fmt.pix.width = frmsizeenum.discrete.width;
-			fmt.fmt.pix.height = frmsizeenum.discrete.height;
+			m_pPixFormat->SetWidth(fmt, frmsizeenum.discrete.width);
+			m_pPixFormat->SetHeight(fmt, frmsizeenum.discrete.height);
+			m_pPixFormat->SetBytesPerLine(fmt, 0);
+		        m_pPixFormat->SetSizeImage(fmt, 0);
 
 			iohelper::xioctl(m_DeviceFileDescriptor, VIDIOC_S_FMT, &fmt);
 		}
@@ -1977,11 +2029,8 @@ int Camera::SetFrameRate(uint32_t numerator, uint32_t denominator)
 {
     int result = -1;
 
-    std::vector<int> allFileDescriptors = m_SubDeviceFileDescriptors;
-    allFileDescriptors.push_back(m_DeviceFileDescriptor);
+    auto const fileDescriptor = m_DeviceFileDescriptor;
 
-    for (const auto fileDescriptor : allFileDescriptors)
-    {
         v4l2_streamparm parm;
 
         CLEAR(parm);
@@ -2003,7 +2052,6 @@ int Camera::SetFrameRate(uint32_t numerator, uint32_t denominator)
                 }
             }
         }
-    }
 
     return result;
 }
diff --git a/Source/Source/CameraListCustomItem.cpp b/Source/Source/CameraListCustomItem.cpp
index 551493f..23140be 100644
--- a/Source/Source/CameraListCustomItem.cpp
+++ b/Source/Source/CameraListCustomItem.cpp
@@ -33,7 +33,7 @@ CameraListCustomItem::CameraListCustomItem(QString cameraName, QWidget *parent)
     m_pMainLayout = new QGridLayout(this);
     m_pMainLayout->addWidget(&m_CameraName, 0, 0);
 
-    m_pMainLayout->setMargin(0);
+    m_pMainLayout->setContentsMargins(0,0,0,0);
     setLayout(m_pMainLayout);
 }
 
diff --git a/Source/Source/CameraObserver.cpp b/Source/Source/CameraObserver.cpp
index 844760a..ffbd245 100644
--- a/Source/Source/CameraObserver.cpp
+++ b/Source/Source/CameraObserver.cpp
@@ -82,7 +82,7 @@ int CameraObserver::CheckDevices()
 
     do
     {
-        deviceName.sprintf("/dev/video%d", deviceCount);
+        deviceName = QString("/dev/video%1").arg(deviceCount);
 
         if ((fileDiscriptor = open(deviceName.toStdString().c_str(), O_RDWR)) == -1)
         {
@@ -231,7 +231,7 @@ int CameraObserver::CheckSubDevices()
 
     do
     {
-        subDeviceName.sprintf("/dev/video%d", subDeviceCount);
+        subDeviceName = QString("/dev/video%1").arg(subDeviceCount);
 
         if ((fileDiscriptor = open(subDeviceName.toStdString().c_str(), O_RDWR)) == -1)
         {
diff --git a/Source/Source/CustomGraphicsView.cpp b/Source/Source/CustomGraphicsView.cpp
index 77f8995..eaf1c07 100644
--- a/Source/Source/CustomGraphicsView.cpp
+++ b/Source/Source/CustomGraphicsView.cpp
@@ -37,9 +37,9 @@ void CustomGraphicsView::wheelEvent(QWheelEvent *event)
 {
     if (m_bIsZoomAllowed)
     {
-        QPointF point = mapToScene(event->pos());
+        QPointF point = mapToScene(event->position().toPoint());
         centerOn(point);
-        if (event->delta() > 0)
+        if (event->angleDelta().y() > 0)
             OnZoomIn();
         else
             OnZoomOut();
@@ -79,7 +79,7 @@ void CustomGraphicsView::mousePressEvent(QMouseEvent *event)
 void CustomGraphicsView::SetScaleFactorToDefault()
 {
     m_dScaleFactor = 1.0;
-    resetMatrix();
+    resetTransform();
 }
 
 double CustomGraphicsView::GetScaleFactorValue()
diff --git a/Source/Source/EnumeratorInterface/IControlEnumerationHolder.cpp b/Source/Source/EnumeratorInterface/IControlEnumerationHolder.cpp
index 437d8d5..57df564 100644
--- a/Source/Source/EnumeratorInterface/IControlEnumerationHolder.cpp
+++ b/Source/Source/EnumeratorInterface/IControlEnumerationHolder.cpp
@@ -25,7 +25,7 @@ IControlEnumerationHolder::IControlEnumerationHolder(int32_t id, QString name, Q
 {
     m_NameOfControl.setText(name);
     setLayout(&m_MainLayout);
-    m_MainLayout.setMargin(0);
+    m_MainLayout.setContentsMargins(0,0,0,0);
 }
 
 IControlEnumerationHolder::~IControlEnumerationHolder()
diff --git a/Source/Source/ImageTransform.cpp b/Source/Source/ImageTransform.cpp
index 727fa8d..81d713a 100644
--- a/Source/Source/ImageTransform.cpp
+++ b/Source/Source/ImageTransform.cpp
@@ -20,6 +20,9 @@
 #include "Logger.h"
 #include "videodev2_av.h"
 
+#include <regex>
+
+#include <QFile>
 #include <QPixmap>
 
 #include <cstring>
@@ -31,6 +34,9 @@
 extern uint8_t *g_ConversionBuffer1;
 extern uint8_t *g_ConversionBuffer2;
 
+int g_shift10Bit = -1;
+int g_shift12Bit = -1;
+
 ImageTransform::ImageTransform() {}
 
 ImageTransform::~ImageTransform() {}
@@ -772,6 +778,46 @@ int ImageTransform::ConvertFrame(const uint8_t *pBuffer, uint32_t length,
     if (NULL == pBuffer || 0 == length)
         return -1;
 
+    if (g_shift10Bit == -1 || g_shift12Bit == -1)
+    {
+        const int tegraShift10Bit = 2;
+        const int tegraShift12Bit = 4;
+
+        QFile socId("/sys/devices/soc0/soc_id");
+
+        if (socId.exists() && socId.open(QFile::ReadOnly))
+        {
+            auto socIdString = socId.readAll().trimmed().toStdString();
+
+
+            LOG_EX("soc id: %s",socIdString.c_str());
+
+            const std::regex imx8Regex(R"(i\.MX8.*)");
+
+            if (std::regex_match(socIdString,imx8Regex))
+            {
+                LOG_EX("Is imx8");
+
+                g_shift10Bit = 8;
+                g_shift12Bit = 8;
+            }
+            else
+            {
+                g_shift10Bit = tegraShift10Bit;
+                g_shift12Bit = tegraShift12Bit;
+            }
+
+            socId.close();
+        }
+        else
+        {
+            LOG_EX("Opening soc_id failed");
+
+            g_shift10Bit = tegraShift10Bit;
+            g_shift12Bit = tegraShift12Bit;
+        }
+    }
+
     std::vector<uint8_t> conversionBuffer;
 
     switch (pixelFormat)
@@ -1020,44 +1066,44 @@ int ImageTransform::ConvertFrame(const uint8_t *pBuffer, uint32_t length,
 
     /* Nano/Generic 12 Bit */
     case V4L2_PIX_FMT_Y12:
-        ConvertJetsonMono16ToRGB24(pBuffer, width, height, convertedImage, 4);
+        ConvertJetsonMono16ToRGB24(pBuffer, width, height, convertedImage, g_shift12Bit);
         break;
 
     case V4L2_PIX_FMT_SGRBG12:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 4, V4L2_PIX_FMT_SGRBG8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift12Bit, V4L2_PIX_FMT_SGRBG8);
         break;
 
     case V4L2_PIX_FMT_SRGGB12:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 4, V4L2_PIX_FMT_SRGGB8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift12Bit, V4L2_PIX_FMT_SRGGB8);
         break;
 
     case V4L2_PIX_FMT_SGBRG12:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 4, V4L2_PIX_FMT_SGBRG8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift12Bit, V4L2_PIX_FMT_SGBRG8);
         break;
 
     case V4L2_PIX_FMT_SBGGR12:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 4, V4L2_PIX_FMT_SBGGR8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift12Bit, V4L2_PIX_FMT_SBGGR8);
         break;
 
     /* Nano/Generic 10 Bit */
     case V4L2_PIX_FMT_Y10:
-        ConvertJetsonMono16ToRGB24(pBuffer, width, height, convertedImage, 2);
+        ConvertJetsonMono16ToRGB24(pBuffer, width, height, convertedImage, g_shift10Bit);
         break;
 
     case V4L2_PIX_FMT_SGRBG10:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 2, V4L2_PIX_FMT_SGRBG8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift10Bit, V4L2_PIX_FMT_SGRBG8);
         break;
 
     case V4L2_PIX_FMT_SRGGB10:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 2, V4L2_PIX_FMT_SRGGB8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift10Bit, V4L2_PIX_FMT_SRGGB8);
         break;
 
     case V4L2_PIX_FMT_SGBRG10:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 2, V4L2_PIX_FMT_SGBRG8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift10Bit, V4L2_PIX_FMT_SGBRG8);
         break;
 
     case V4L2_PIX_FMT_SBGGR10:
-        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, 2, V4L2_PIX_FMT_SBGGR8);
+        ConvertJetsonBayer16ToRGB24(pBuffer, width, height, convertedImage, g_shift10Bit, V4L2_PIX_FMT_SBGGR8);
         break;
 
 
diff --git a/Source/Source/SelectSubDeviceDialog.cpp b/Source/Source/SelectSubDeviceDialog.cpp
old mode 100755
new mode 100644
diff --git a/Source/Source/V4L2EventHandler.cpp b/Source/Source/V4L2EventHandler.cpp
index aa68fb3..4e52efb 100644
--- a/Source/Source/V4L2EventHandler.cpp
+++ b/Source/Source/V4L2EventHandler.cpp
@@ -22,9 +22,10 @@
 #include <sys/eventfd.h>
 #include <unistd.h>
 
+
 #include "V4L2EventHandler.h"
 
-V4L2EventHandler::V4L2EventHandler(int fd) : m_Fd(fd)
+V4L2EventHandler::V4L2EventHandler(const std::vector<int>  & fds) : m_Fds(fds)
 {
 
     m_eventFd = eventfd(0,0);
@@ -36,19 +37,25 @@ V4L2EventHandler::~V4L2EventHandler()
 
 void V4L2EventHandler::SubscribeControl(int id)
 {
-    v4l2_event_subscription subscription = {0};
-    subscription.id = id;
-    subscription.type = V4L2_EVENT_CTRL;
-	subscription.flags = V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK;
-    ioctl(m_Fd,VIDIOC_SUBSCRIBE_EVENT,&subscription);
+    for (const auto & fd : m_Fds)
+    {
+        v4l2_event_subscription subscription = {0};
+        subscription.id = id;
+        subscription.type = V4L2_EVENT_CTRL;
+        subscription.flags = V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK;
+        ioctl(fd, VIDIOC_SUBSCRIBE_EVENT, &subscription);
+    }
 }
 
 void V4L2EventHandler::UnsubscribeControl(int id)
 {
-    v4l2_event_subscription subscription = {0};
-    subscription.id = id;
-    subscription.type = V4L2_EVENT_CTRL;
-    ioctl(m_Fd,VIDIOC_UNSUBSCRIBE_EVENT,&subscription);
+    for (const auto & fd : m_Fds)
+    {
+        v4l2_event_subscription subscription = {0};
+        subscription.id = id;
+        subscription.type = V4L2_EVENT_CTRL;
+        ioctl(fd, VIDIOC_UNSUBSCRIBE_EVENT, &subscription);
+    }
 }
 
 void V4L2EventHandler::run()
@@ -57,29 +64,43 @@ void V4L2EventHandler::run()
 
     while (!isInterruptionRequested())
     {
-        pollfd pfds[2];
 
+        std::vector<pollfd> pfds;
 
-        pfds[0].events = POLLPRI;
-        pfds[0].fd = m_Fd;
+        for (const auto fd : m_Fds)
+        {
+            pollfd pfd = {
+                .fd = fd,
+                .events = POLLPRI,
+            };
 
-        pfds[1].events = POLLIN;
-        pfds[1].fd = m_eventFd;
+            pfds.push_back(pfd);
+        }
 
-        int ret = poll(pfds,2,-1);
+        pollfd event_pfd = {
+            .fd = m_eventFd,
+            .events = POLLIN,
+        };
+
+        pfds.push_back(event_pfd);
+
+        int ret = poll(pfds.data(),pfds.size(),-1);
         if (ret > 0)
         {
-            if (pfds[0].revents & POLLPRI)
+            for (const auto & pfd : pfds)
             {
-                v4l2_event event = {0};
+                if (pfd.revents & POLLPRI)
+                {
+                    v4l2_event event = {0};
 
-                int error = ioctl(m_Fd,VIDIOC_DQEVENT,&event);
+                    int error = ioctl(pfd.fd,VIDIOC_DQEVENT,&event);
 
-                if (!error)
-                {
-                    if (event.type == V4L2_EVENT_CTRL)
+                    if (!error)
                     {
-                        emit ControlChanged(event.id,event.u.ctrl);
+                        if (event.type == V4L2_EVENT_CTRL)
+                        {
+                            emit ControlChanged(event.id,event.u.ctrl);
+                        }
                     }
                 }
             }
@@ -97,8 +118,11 @@ void V4L2EventHandler::Stop()
     eventfd_t value;
     eventfd_read(m_eventFd,&value);
 
-	v4l2_event_subscription subscription = {0};
-	subscription.type = V4L2_EVENT_ALL;
-	ioctl(m_Fd,VIDIOC_UNSUBSCRIBE_EVENT,&subscription);
+	for (const auto & fd : m_Fds)
+    {
+        v4l2_event_subscription subscription = {0};
+        subscription.type = V4L2_EVENT_ALL;
+        ioctl(fd,VIDIOC_UNSUBSCRIBE_EVENT,&subscription);
+    }
 }
 
diff --git a/Source/Source/V4L2Viewer.cpp b/Source/Source/V4L2Viewer.cpp
index 10b47b3..a424cfa 100644
--- a/Source/Source/V4L2Viewer.cpp
+++ b/Source/Source/V4L2Viewer.cpp
@@ -41,6 +41,9 @@
 #include <limits>
 #include <sstream>
 
+#include <linux/media.h>
+
+
 #define NUM_COLORS 3
 #define BIT_DEPTH 8
 
@@ -59,7 +62,6 @@
 
 #define EXPOSURE_MAX_VALUE 2147483647
 
-
 static int32_t int64_2_int32(const int64_t value)
 {
     if (value > 0)
@@ -98,7 +100,7 @@ V4L2Viewer::V4L2Viewer(QWidget *parent, Qt::WindowFlags flags)
     qApp->setFont(font);
 
     m_pGermanTranslator = new QTranslator(this);
-    m_pGermanTranslator->load(":/Translations/Translations/german.qm");
+    (void)m_pGermanTranslator->load(":/Translations/Translations/german.qm");
 
     srand((unsigned)time(0));
 
@@ -333,6 +335,68 @@ void V4L2Viewer::changeEvent(QEvent *event)
     }
 }
 
+struct MediaNode {
+    uint32_t id;
+    std::string name;
+    std::string devNodePath;
+    QVector<QSharedPointer<MediaNode>> sources;
+    QVector<QSharedPointer<MediaNode>> sinks;
+};
+
+std::string readDevNode(const media_entity_desc & entity)
+{
+    if (entity.dev.major != 0)
+    {
+        auto const charDevId = std::to_string(entity.dev.major) + ":" + std::to_string(entity.dev.minor);
+        QFile devNodeIdPath(QString::fromStdString("/dev/char/" + charDevId));
+
+        if (devNodeIdPath.exists())
+        {
+            return devNodeIdPath.symLinkTarget().toStdString();
+        }
+    }
+
+     return "";
+}
+
+void readSinkNodes(int mediaFd,const media_entity_desc & sourceEntity, const QSharedPointer<MediaNode> sourceNode) {
+    media_link_desc *linkDesc = new media_link_desc[sourceEntity.links];
+    media_links_enum linksEnum{
+            .entity = sourceEntity.id,
+            .pads = nullptr,
+            .links = linkDesc,
+
+    };
+
+    if (ioctl(mediaFd,MEDIA_IOC_ENUM_LINKS,&linksEnum) == 0)
+    {
+        for (int i = 0; i < sourceEntity.links; i++)
+        {
+            const auto & link = linkDesc[i];
+
+            media_entity_desc sinkEntity = {0};
+            sinkEntity.id = link.sink.entity;
+
+
+            if (ioctl(mediaFd,MEDIA_IOC_ENUM_ENTITIES,&sinkEntity) == 0)
+            {
+                QSharedPointer<MediaNode> sinkNode(new MediaNode{
+                        .id = sinkEntity.id,
+                        .name = std::string(sinkEntity.name),
+                        .devNodePath = readDevNode(sinkEntity)
+                });
+
+                sinkNode->sources.push_back(sourceNode);
+                sourceNode->sinks.push_back(sinkNode);
+
+                readSinkNodes(mediaFd,sinkEntity,sinkNode);
+            }
+        }
+    }
+
+    delete[] linkDesc;
+};
+
 // The event handler for open / close camera
 void V4L2Viewer::OnOpenCloseButtonClicked()
 {
@@ -351,7 +415,7 @@ void V4L2Viewer::OnOpenCloseButtonClicked()
 
     QVector<QString> selectedSubDeviceList;
 
-    if(false == m_bIsOpen && !m_SubDevices.empty())
+    /*if(false == m_bIsOpen && !m_SubDevices.empty())
     {
         LOG_EX("V4L2Viewer::OnOpenCloseButtonClicked: user will select sub-devices from list of size %d", m_SubDevices.size());
 
@@ -359,8 +423,85 @@ void V4L2Viewer::OnOpenCloseButtonClicked()
         selectSubDeviceDialog.exec();
 
         LOG_EX("V4L2Viewer::OnOpenCloseButtonClicked: user selected %d sub-devices", selectedSubDeviceList.size());
+    }*/
+
+
+    QVector<QSharedPointer<MediaNode>> sensorNodes;
+
+    int mediaFd = open("/dev/media0",O_RDWR);
+
+
+
+    if (mediaFd > 0)
+    {
+        struct media_entity_desc mediaEntity = {0};
+        mediaEntity.id |= MEDIA_ENT_ID_FLAG_NEXT;
+
+        while(ioctl(mediaFd,MEDIA_IOC_ENUM_ENTITIES,&mediaEntity) == 0)
+        {
+            LOG_EX("Read next media entity...");
+
+            if (mediaEntity.type == MEDIA_ENT_F_CAM_SENSOR)
+            {
+                LOG_EX("Media entity %s is a camera.",mediaEntity.name);
+
+                QSharedPointer<MediaNode> sensorNode(new MediaNode{
+                    .id = mediaEntity.id,
+                    .name = std::string(mediaEntity.name),
+                    .devNodePath = readDevNode(mediaEntity)
+                });
+
+                readSinkNodes(mediaFd,mediaEntity,sensorNode);
+
+                sensorNodes.push_back(sensorNode);
+            }
+
+            mediaEntity.id |= MEDIA_ENT_ID_FLAG_NEXT;
+        }
+
+        for (const auto & node : sensorNodes)
+        {
+            std::string text = node->name + "( " + node->devNodePath + " )";
+
+            auto readNode = node;
+
+            while (!readNode->sinks.empty())
+            {
+                auto next = readNode->sinks.first();
+
+                text += " -> " + next->name + "( " + next->devNodePath + " )";
+
+                readNode = next;
+            }
+
+            LOG_EX("Topology: %s",text.c_str());
+
+        }
+
+        ::close(mediaFd);
     }
 
+    auto getCameraNode = [&](QString deviceName) {
+        for (const auto & node : sensorNodes)
+        {
+            auto readNode = node;
+
+            while (!readNode->sinks.empty())
+            {
+                auto next = readNode->sinks.first();
+
+                if (deviceName.toStdString() == next->devNodePath)
+                {
+                    return node;
+                }
+
+                readNode = next;
+            }
+        }
+
+        return QSharedPointer<MediaNode>();
+    };
+
     if (-1 < nRow)
     {
         QString devName = dynamic_cast<CameraListCustomItem*>(ui.m_CamerasListBox->itemWidget(ui.m_CamerasListBox->item(nRow)))->GetCameraName();
@@ -370,6 +511,26 @@ void V4L2Viewer::OnOpenCloseButtonClicked()
 
         if (false == m_bIsOpen)
         {
+            const auto cameraNode = getCameraNode(deviceName);
+
+            if (!cameraNode.isNull())
+            {
+                selectedSubDeviceList.clear();
+
+                LOG_EX("Selected camera node %s",cameraNode->name.c_str());
+
+                auto readNode = cameraNode;
+
+                while (!readNode->sinks.empty())
+                {
+                    if (!readNode->devNodePath.empty())
+                        selectedSubDeviceList.append(QString::fromStdString(readNode->devNodePath));
+
+                    auto next = readNode->sinks.first();
+                    readNode = next;
+                }
+            }
+
             // Start
             err = OpenAndSetupCamera(m_cameras[nRow], deviceName, selectedSubDeviceList);
             // Set up Qt image
@@ -855,24 +1016,66 @@ void V4L2Viewer::StartStreaming(uint32_t pixelFormat, uint32_t payloadSize, uint
     {
         LOG_EX("V4L2Viewer::StartStreaming streaming will be started");
         m_Camera.QueueAllUserBuffer();
-        m_Camera.StartStreaming();
-        err = m_Camera.StartStreamChannel(pixelFormat,
-                                          payloadSize,
-                                          width,
-                                          height,
-                                          bytesPerLine,
-                                          NULL,
-                                          ui.m_TitleLogtofile->isChecked());
-
-        if (0 == err)
+        if (m_Camera.StartStreaming() == 0)
         {
-            m_bIsStreaming = true;
+            err = m_Camera.StartStreamChannel(pixelFormat,
+                                              payloadSize,
+                                              width,
+                                              height,
+                                              bytesPerLine,
+                                              NULL,
+                                              ui.m_TitleLogtofile->isChecked());
+
+            if (0 == err)
+            {
+                m_bIsStreaming = true;
+
+                UpdateViewerLayout();
+
+                m_FramesReceivedTimer.start(1000);
+
+                return;
+            }
+
+            CustomDialog::Error( this, tr("Video4Linux"), tr("Start stream channel failed!") );
         }
+        else
+        {
+            CustomDialog::Error( this, tr("Video4Linux"), tr("Start streaming failed!") );
+        }
+        
+        m_Camera.StopStreaming();
 
-        UpdateViewerLayout();
+        m_Camera.DeleteUserBuffer();
+    }
+    else
+    {
+        CustomDialog::Error( this, tr("Video4Linux"), tr("Create user buffer failed!") );
+    }
+
+
+    ui.m_pixelFormats->setEnabled(true);
+    ui.m_frameSizes->setEnabled(true);
+    ui.m_labelPixelFormats->setEnabled(true);
+    ui.m_labelFrameSizes->setEnabled(true);
+
+    ui.m_labelFrameRateAuto->setEnabled(true);
+    ui.m_chkFrameRateAuto->setEnabled(true);
 
-        m_FramesReceivedTimer.start(1000);
+    if (!ui.m_chkFrameRateAuto->isChecked())
+    {
+        ui.m_labelFrameRate->setEnabled(true);
+        ui.m_edFrameRate->setEnabled(true);
     }
+
+    if(m_bIsCropAvailable)
+    {
+        ui.m_cropWidget->setEnabled(true);
+    }
+
+
+    UpdateViewerLayout();
+
 }
 
 // The event handler for stopping acquisition
@@ -931,7 +1134,7 @@ void V4L2Viewer::OnSaveImageClicked()
         m_LastImageSaveFormat = ".raw";
         QPixmap pixmap = m_PixmapItem->pixmap();
         QImage image = pixmap.toImage();
-        int size = image.byteCount();
+        int size = image.sizeInBytes();
         QByteArray data(reinterpret_cast<const char*>(image.bits()), size);
         QFile file(fullPath);
         file.open(QIODevice::WriteOnly);
@@ -1402,7 +1605,7 @@ void V4L2Viewer::OnFrameRate()
     {
         CustomDialog::Error( this, tr("Video4Linux"), tr("FAILED TO SAVE frame rate!") );
         m_Camera.ReadFrameRate(numerator, denominator, width, height, pixelFormat);
-        denominator /= 1000;
+        denominator /= numerator;
         ui.m_edFrameRate->setText(QString("%1").arg(denominator));
     }
     else
@@ -1636,6 +1839,7 @@ void V4L2Viewer::GetImageInformation(const bool isCalledFromOnOpen)
     {
         ui.m_labelGainAuto->setEnabled(false);
         ui.m_chkAutoGain->setEnabled(false);
+        autogain = false;
     }
 
     if (m_Camera.ReadExposure(exposure) != -2)
@@ -1685,6 +1889,7 @@ void V4L2Viewer::GetImageInformation(const bool isCalledFromOnOpen)
     {
         ui.m_labelExposureAuto->setEnabled(false);
         ui.m_chkAutoExposure->setEnabled(false);
+        autoexposure = false;
     }
 
     nSVal = 0;
@@ -1745,7 +1950,7 @@ void V4L2Viewer::GetImageInformation(const bool isCalledFromOnOpen)
                 ui.m_chkFrameRateAuto->setChecked(false);
                 ui.m_edFrameRate->setEnabled(true);
                 ui.m_labelFrameRate->setEnabled(true);
-                denominator /= 1000;
+                denominator /= numerator;
                 ui.m_edFrameRate->setText(QString("%1").arg(denominator));
             }
         }
diff --git a/V4L2ViewerLib.cmake b/V4L2ViewerLib.cmake
index 2a05b38..34ffff9 100644
--- a/V4L2ViewerLib.cmake
+++ b/V4L2ViewerLib.cmake
@@ -115,21 +115,32 @@ set(CMAKE_INCLUDE_CURRENT_DIR ON)
 set(CMAKE_AUTOMOC ON)
 set(CMAKE_AUTOUIC ON)
 
-find_package(Qt5 COMPONENTS Core Widgets Gui REQUIRED)
-find_package(Threads REQUIRED)
-
-list(APPEND QT_LIBRARIES
-  Qt5::Core
-  Qt5::Gui
-  Qt5::Widgets
-  Threads::Threads
-)
-
 list(APPEND QT_RESOURCES
   ${RESOURCES_PATH}/V4L2Viewer.qrc
 )
 
-qt5_add_resources(RESOURCES ${QT_RESOURCES})
+find_package(Qt6 COMPONENTS Core Widgets Gui QUIET)
+if(Qt6_FOUND)
+  list(APPEND QT_LIBRARIES
+    Qt6::Core
+    Qt6::Gui
+    Qt6::Widgets
+    Threads::Threads
+  )
+  qt6_add_resources(RESOURCES ${QT_RESOURCES})
+else()
+  find_package(Qt5 COMPONENTS Core Widgets Gui REQUIRED)
+  list(APPEND QT_LIBRARIES
+    Qt5::Core
+    Qt5::Gui
+    Qt5::Widgets
+    Threads::Threads
+  )
+  qt5_add_resources(RESOURCES ${QT_RESOURCES})
+endif()
+add_compile_definitions(QT_DISABLE_DEPRECATED_BEFORE=0x050F00)
+
+find_package(Threads REQUIRED)
 
 list(APPEND RESOURCES
   ${RESOURCES_PATH}/V4L2Viewer.rc
